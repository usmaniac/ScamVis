
from the first line of the data:

When collecting from bw we need to convert our array to string and have it as such and send directly to postgres not a file

>>> str(x).replace('[','{')
"{{'148.5404', '0'], {'148.51', '0'], {'148.5', '0'], {'148.4592', '0'], {'148.2437', '0']]"
>>> str(x).replace(']','}')
"[['148.5404', '0'}, ['148.51', '0'}, ['148.5', '0'}, ['148.4592', '0'}, ['148.2437', '0'}}"



books.csv
bids: [["3.82", "5.4453"], ["3.7283", "13.2397"], ["3.7282", "127.7627"], ["3.7275", "0.1"], ["3.7272", "46.413"]]
asks: [["3.8361", "399"], ["3.8362", "2.8542"], ["3.8368", "15.0222"], ["3.8377", "114.6228"], ["3.8381", "34.8099"]]


ETH_USDT;2019-02-22T14:42:55.970052;
[["148.5404", "0"], ["148.51", "0"], ["148.5", "0"], ["148.4592", "0"], ["148.2437", "0"]];
[["144.02", "0"], ["144.5", "0"], ["144.8717", "0"], ["146.103", "0"], ["146.1039", "0"]]

trades.csv
symbol; time1 echange time; time2 local time;  3.8 = 
EOS_USDT;;2019-02-22 01:46:09;2019-02-22T01:46:10.151156;    3.8281;       2.4053;1;
(use the historical data we have now)
(create live feed simulator for our own thing)

bw return as per the docs:
[
    [
        "T",         //Data type, full Trade data
        "281",       //The market id
        "1569313211",//Timestamp
        "BTC_USDT",  //Symbol
        "ask",       //Type, ask: Selling order, bid: Buying order
        "9735.95",   //price
        "0.0008"     //amount
    ],
    // more Trade Detail data here...
]


-> they take the top 5 bids and the top 5 asks
-> the tuple represents ....

